pipeline {
    agent any

    environment {
        DOCKER_HUB_CREDENTIALS = credentials('docker-khk')
        GITLAB_CREDENTIALS = credentials('deploy')
        DOCKER_USERNAME = 'jingluv'
    }

    stages {
        stage('Initialize') {
            steps {
                script {
                    env.ENABLE_BACKEND = "false"
                    env.ENABLE_FRONTEND = "false"
                    env.ENABLE_AI = "false"
                }
            }
        }

        stage('Checkout') {
            steps {
                script {
                    echo "Checking out from GitLab"
                    git branch: 'master', url: 'https://lab.ssafy.com/s11-webmobile1-sub2/S11P12D201.git', credentialsId: 'deploy'
                }
                script {
                    env.GIT_COMMIT = sh(returnStdout: true, script: 'git rev-parse --short HEAD').trim()
                }
            }
        }

        stage('Build and Push STEACH Backend') {
            when {
                changeset "backend/**"
            }
            steps {
                script {
                    echo "Building and Pushing STEACH Backend New Version"
                    dir('backend') { 
                        sh 'chmod +x ./gradlew'
                        sh './gradlew clean build -x test'
                        def backendImage = docker.build("${DOCKER_USERNAME}/steach-backend:${GIT_COMMIT}")
                        docker.withRegistry('https://index.docker.io/v1/', 'docker-khk') {
                            backendImage.push()
                        }
                        env.BACKEND_IMAGE_TAG = "${GIT_COMMIT}"
                        env.ENABLE_BACKEND = "true"
                    }
                }
            }
        }

        stage('Build and Push Frontend') {
            when {
                changeset "frontend/**"
            }
            steps {
                script {
                    echo "Building and Pushing STEACH Frontend New Version"
                    dir('frontend') {
                        def frontendImage = docker.build("${DOCKER_USERNAME}/steach-frontend:${GIT_COMMIT}")
                        docker.withRegistry('https://index.docker.io/v1/', 'docker-khk') {
                            frontendImage.push()
                        }
                        env.FRONTEND_IMAGE_TAG = "${GIT_COMMIT}"
                        env.ENABLE_FRONTEND = "true"
                    }
                }
            }
        }

        stage('Build and Push AI') {
            when {
                changeset "ai/**"
            }
            steps {
                script {
                    echo "Building and Pushing STEACH AI New Version"
                    dir('ai') {
                        def aiImage = docker.build("${DOCKER_USERNAME}/steach-ai:${GIT_COMMIT}")
                        docker.withRegistry('https://index.docker.io/v1/', 'docker-khk') {
                            aiImage.push()
                        }
                        env.AI_IMAGE_TAG = "${GIT_COMMIT}"
                        env.ENABLE_AI = "true"
                    }
                }
            }
        }
        
        stage('Deploying the STEACH by changing containers') {
            steps {
                script {
                    if (env.ENABLE_BACKEND == "true") {
                        echo "Stopping and Removing Backend Container"
                        sh '''
                        docker stop backend || true
                        docker rm backend || true
                        fuser -k 8080/tcp || true
                        '''
                        sleep 10
                        sh """
                        docker-compose up -d backend
                        """
                    }

                    if (env.ENABLE_FRONTEND == "true") {
                        echo "Stopping and Removing Frontend Container"
                        sh '''
                        docker stop frontend || true
                        docker rm frontend || true
                        fuser -k 5173/tcp || true
                        '''
                        sleep 10
                        sh """
                        docker-compose up -d frontend
                        """
                    }

                    if (env.ENABLE_AI == "true") {
                        echo "Stopping and Removing AI Container"
                        sh '''
                        docker stop ai || true
                        docker rm ai || true
                        fuser -k 3000/tcp || true
                        '''
                        sleep 10
                        sh """
                        docker-compose up -d ai
                        """
                    }
                }
            }
        }
    }
    post {
        always {
            echo "Cleaning workspace"
            cleanWs()
        }
    }
}
